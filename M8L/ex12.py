'''O valor aproximado de pi pode ser calculado a partir da s√©rie: ùúã = 4/1 - 4/3 + 4/5 - 4/7 + ‚ãØ
Escreva uma fun√ß√£o que calcule o valor de ÔÅ∞, com precis√£o dada como par√¢metro. '''

# Fun√ß√£o para calcular o valor aproximado de œÄ usando a s√©rie de Leibniz
def calcular_pi(precisao):
    '''
    A precis√£o determina quantos termos da s√©rie ser√£o usados.
    Quanto maior a precis√£o, mais pr√≥ximo do valor real de œÄ ser√° o resultado.
    '''
    pi_aproximado = 0
    sinal = 1

    for i in range(1, precisao + 1):
        termo = 4 / (2 * i - 1)  # Usado para determinar o denominador
        pi_aproximado += sinal * termo  # Adiciona ou subtrai o termo da s√©rie
        sinal *= -1  # Alterna o sinal entre + e -

    return pi_aproximado  # Retorna o valor aproximado de œÄ

# Fun√ß√£o principal para obter a entrada do usu√°rio e calcular œÄ
def main():
    # Exemplo de uso:
    while True:
        try:
            precisao_desejada = input("Insira a precisao desejada (Obs: Insira n√∫meros inteiros e pressione ENTER para sair do programa): ")  # Solicita a precis√£o desejada
            if precisao_desejada == "":
                print("\nPrograma encerrado")
                break
            precisao_desejada = int(precisao_desejada)  # Converte a entrada para um n√∫mero inteiro
            valor_pi = calcular_pi(precisao_desejada)  # Calcula o valor aproximado de œÄ
            print(f"Valor aproximado de œÄ com {precisao_desejada} termos: {valor_pi:.10f}")  # Exibe o valor aproximado de œÄ
            
        except ValueError:
            print("insira um n√∫mero val√≠do!")  # Mensagem de erro para entradas n√£o inteiras

# Chama a fun√ß√£o principal se o script for executado diretamente
main()

